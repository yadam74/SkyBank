package com.revature.project2Data.service;

import com.revature.project2Data.model.Account;
import com.revature.project2Data.model.User;
import com.revature.project2Data.repository.AccountRepository;
import com.revature.project2Data.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private UserRepository userRepository;


    @Transactional(propagation = Propagation.REQUIRED)
    public Account addAccount(Account newAccount) {


        System.out.println(newAccount.toString());
        //We are grabbing the PokemonBox object stored within pokemon object and grabbing its id

        // We are grabbing the PokemonBox object stored within pokemon object and
        // grabbing its id

        Optional<User> foundUser = userRepository.findById(newAccount.getUser().getId());
        User user;

        // If statement that checks if PokemonBox exists
        // If not, create a new one and store in database
        // If so, don't do anything
        if (foundUser.isEmpty()) {
            user = userRepository.save(new User());
        } else {
            user = foundUser.get();
        }

        // Grab PokemonBox object from Pokemon Object and set its boxId to the
        // autogenerated one from SQL
        newAccount.getUser().setId(user.getId());

        //Save the new Pokemon

        // Save the new Pokemon

        return accountRepository.save(newAccount);
    }
}
